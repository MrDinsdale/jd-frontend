= content.post-hero featuredImage='http://joedinsdale.co.uk/images/posts/2015-10-22--working-with-ember-components/featured.jpg'

.post-body
  .cactus__w--wide
    .cactus__g
      .cactus__u--1-2
        .post-header
          h1.post-header__title Working with Ember Components
          h2.post-header__tagline Something about stuff etc (Coming soon)
      .cactus__u--1-2
        h3 The move to Components

        p Ember recently deprecated the use of Views in favour of using Components. This means that the Model-View-Controller approach we have seen in the past has been replaced with Model-Route-Component-Service following a DDAU methodology (data down, actions up). For more information of the reasoning behind these transitions I recommend taking a look at <a href="http://emberjs.com/blog/">the EmberJS blog</a>.

        p While this may seem daunting at first I feel its definitely a move in the right direction, encouraging reusable components and isolation of concerns. Let's take a look at handling a pretty simple use of Components to create a collapsable site navigation menu. This post is written with Ember CLI. Ember JS 2.1.0 and Emblem in mind, if I've made any mistakes please feel free to let me know!

        h3 Setting up

        p I'm going to use a cut down version of some code I wrote recently, it will comprise of <code>site-nav</code> and <code>site-nav-toggle</code>. Components should have a <code>-</code> in the name, this is to prevent clashes with future HTML element names and complies with the W3C <a href="http://w3c.github.io/webcomponents/spec/custom/">Custom Element</a> spec.

        h4 Creating some components

        p The easiest way to get started is to use Embers CLIs built in blueprints:

        p This will generate 3 files for each component:

        p I'm going to make the assumption that your navigation will be nested within your apps <code>application</code> so that it is consistent throughout your app. To render the components in your <code>application.emblem</code> add:

        p <em><code>app/templates/components/site-nav-toggle.emblem</code></em>

        p Let's give our components some simple content:

        p <em><code>app/templates/components/site-nav-toggle.emblem</code></em>

        p <em><code>app/templates/components/site-nav.emblem</code></em>

        p We wont add any HTML elements to wrap the markup we just wrote as we can do that within the Subclass of each component.

        p While it may not have any behaviour to make the navigation do anything just yet, when hitting <code>ember serve</code> in the terminal and jumping to <code>localhost:4200</code> in your browser you should see our new components appearing on the page.

        h4 Handling the interaction

        p Components are small contained chunks, they don't have the ability to communicate directly to each other so how will we get a click on the toggle to trigger the hiding/showing of the navigation? This is where the data down, actions up convention comes in to play.

        p As we cant communicate directly we will need to pass information about the current state and set up actions to handle events. There may be other ways to approach this however for me the most semantic way was to create a state property on the parent controller. We don't need to explicitly set this state on the controller as calling <code>this.set('navState', 1);</code> within our components will do this for us however we do need to pass that information to them (data down). To do this let's modify our application template, we can easily pass our <code>navState</code> property to our components like so:

        p <em><code>app/templates/components/site-nav-toggle.emblem</code></em>

        p Now we have the ability to communicate the current state of the navigation and utilise that property within our components, for ease let's say <code>1</code> is open and <code>0</code> is closed.

        p We will also need to add an action on the <code>site-nav-toggle</code> to open/collapse our <code>site-nav</code> and while we're at it setup how it will render. Let's go back to our Subclasses:


        p For our <code>site-navigation</code> let's add an opening and closing animation to our nav (we can worry about implementing the animation later):

        p <em><code>app/components/site-nav.js</code></em>


        p Now when we click our <code>site-nav-toggle</code> we should see the relevant log message pop up in our browser console when we click the toggle.

        p I won't go into styling the navigation etc however for creating some really nice transitions I recommend taking a look at <a href="http://greensock.com/get-started-js">Greensock</a> animation platform. This fits perfectly with the system we have set up in this tutorial:

        p <em><code>app/components/site-nav.js</code></em>

        p In the example above we create a timeline using <code>TimelineLite</code> and set it to paused. We then append some keyframes to that timeline which will show the navigation. Rather than setting up two separate animations we just set one and play/reverse it, Greensock takes care of everything else! It assumes that the <code>site-nav</code> is set to be hidden via CSS. While this is a fairly crude example you can start to see how you could start to build some pretty cool transitions quickly and easily.

        h4 Sending Actions

        p The example here is pretty simple, we change a property on the parent controller and respond accordingly.

        p There are some scenarios however where this approach may not be applicable. A good example for this is where a click on a component should trigger a route change, components have no ability to transition to different routes in our application.

        p In this scenario we need to use Embers <code>sendAction()</code> helper. For example purposes let's create a next/previous button component.

        p Here's our <code>page-nav</code> template:

        p Here's our subclass:

        p To render this in our parent template we can simply add:

        p We pass the <code>direction</code> which is useful to make our button a little more reusable. We also pass the <code>transitionTarget</code>, we wont go in to detail on how this might be calculated however this would be pass the target route for the next/prev pages.

        p To get the click action to work however it is vital that you specify the action when calling the component otherwise it wont fire.

        p Now lets set up the actions in our parent controller:

        p Now the click event will fire the <code>changeSection</code> action on the parent controller and trigger a <code>transitionToRoute</code> to the route specified in the <code>transitionTarget</code> parameter.

        h3 Conclusion

        p So there we have it, we can now create components, pass them data and send actions back up the chain. While these examples are fairly basic they should form a good foundation for going forward.

        p For further reading I strongly recommend reading through the official docs and there are some great guides on <a href="http://emberigniter.com/">Ember Igniter</a>.

        p Hopefully this has been a useful dive into working with Components. Any questions or if you notice any mistakes, don't hesitate to get in touch!